---
description: This rules is critical to understand how to generate code inside this project. It contains Project guidelines
globs: 
alwaysApply: true
---

# Project Guidelines

## 1. Tech Stack
- React with TypeScript
- React Router v7 (React Router merged)
- Shadcn/ui for components
- MongoDB with Mongoose ODM
- TailwindCSS for styling
- React Mail (for beautiful email using react component)

## 2. Project Structure
```
app/
├── components/     # Shared components
├── config/        # The app global static config (load from .env file)
├── core/ 
│   ├── abstracts  # Contains base classes & interfaces (model.base.ts, service.server.ts)
│   ├── db         # MongoDB connection entry, utils and mongoose plugins
│   ├── entities   # Mongoose schema modal 
│   └── utils      # General nodejs server side utils (email sending service with nodemailer and react mail, file system utils, logger, etc)
├── datas          # Any static data needed by the app
├── hooks          # Auto generated by shadcn, contains also any custom react hooks used in the app
├── lib            # Auto generated by shadcn, contains also, special utils and cli (like init.cli.ts used to create first admin user account from cmd), prepare.server.ts, etc
├── routes/        # All application routes
│   ├── auth/      # Authentication routes
│   ├── public/    # Public routes
│   └── app/       # Protected routes (with /app prefix)
├── services       # Business logic classes and dealing with the mongodb through mongoose, extends generaly (but not always), the base service, service.server.ts
├── app.css        # The main css file of the app, contains also tailwind stuffs
├── entry.client.tsx # Client side entry of react router (auto generated by the framework)
├── entry.server.tsx # Server side entry of the react router framework (auto generated), but is usually customized for integration of socket.io, calling prepare.server.ts to init services (db, email server, etc) before the app itself start
├── root.tsx       # React Router root component, always run whatever the matched url/route
├── routes.ts      # Routes declaration of all the apps. The routes declaration follow the sample provided below in this rules files
└── sessions.server.ts # Contains helper for manager user sessions

├── build/         # Auto generated, contains production build of the app
├── docs/          # Contains generally the project documentation, specs and any business logic and information like colors scheme, design guide, etc about the app. Useful to gather information about the app real feature we have to implement (markdown file)
├── logs/          # Logs dir (logs/debug, logs/error/*.log), contains horodated log file about our current and passed run of the app. Useful to fix issues 
├── node_modules/  # npm modules packages dir
├── public/        # Contains public ressources file (js, image, uploaded files, font, etc )
├── .env/          # Current local run env var for the app. Must follow the project .env.example vars schemas
├── .env.example   # Env vars schema, intented to be copied and used in .env
└── etc           # All possible remaining files are common config file in any js project like package.json, etc
```

## 3. Coding Conventions

### 3.1 React Router Imports
Always import from 'react-router' instead of 'react-router-dom':
```tsx
import { Link, data, useLoaderData, useNavigate, useNavigation } from "react-router";
```

### 3.2 Route Types
Each page must import its Route type from auto-generated types:
```tsx
import type { Route } from "./+types/{fileName}";
```
If such Route type raise a lint error, you can ignore it because it's auto generated by react router. Never try to create the `+types` folder manually. The Route type is auto generated by React Router framework when I run `yarn dev` to start the app. So, no need to worry about any lint issues it can raise.

### 3.3 Page Structure
Pages should follow this structure:
```tsx
import type { Route } from "./+types/pageName";

export function meta({}: Route.MetaArgs) {
  return [
    { title: "Page Title - App title" },
    { name: "description", content: "Page description" },
  ];
}

export function loader({ request, params }: Route.LoaderArgs) {
    const id =  params.id; // Maybe I want to retrieve the id from the url params
  return data({ /* ... */ });
}

export async function action({ request, params }: Route.ActionArgs) {
    const id =  params.id; // Maybe I want to retrieve the id from the url params
  return data({ /* ... */ });
}

export default function PageName({ loaderData, actionData }: Route.ComponentProps) {
  return ( /* ... */ );
}
```

## 4. Routes Declaration

### 4.1 Overview
In React Router v7, there are file based and declaration based way to register the application routes.
We choose to always use the routes.ts (declaration) way, which is the recommended method by the React Router authors.

### 4.2 Example Routes Configuration
```tsx
import { type RouteConfig, index, route, prefix, layout } from "@react-router/dev/routes";

export default [
  /*********************** Public Routes ****************************/
  layout('routes/public-layout.tsx', [
    index('routes/home.tsx'),
    route('/search', 'routes/search-todos.tsx'),
    route('/todo/by/:authorId', 'routes/todo-by-author.tsx'),
    route('/contact', 'routes/contact.tsx'),
    route('/about-us', 'routes/about-us.tsx'),
    route('/join-us', 'routes/join-us.tsx'),
    route('/legal', 'routes/legal.tsx'),
    route('/privacy', 'routes/privacy.tsx'),
    route('/tos', 'routes/tos.tsx')
  ]),

  /*********************** Authentication Routes ****************************/
  layout('routes/auth-layout.tsx', [
    route('/login', 'routes/auth/login.tsx'),
    route('/register', 'routes/auth/register.tsx'),
    route('/forgot-password', 'routes/auth/forgot-password.tsx'),
    route('/reset-password', 'routes/auth/reset-password.tsx'),
    route('/verify-email', 'routes/auth/verify-email.tsx'),
    route('/request-email-verification', 'routes/auth/request-email-verification.tsx'),
    route('/logout', 'routes/auth/logout.tsx'),
  ]),

  /*********************** Protected Routes ****************************/
  ...prefix('/app', [
    layout('routes/app-layout.tsx', [
      index('routes/app/home.tsx'),
      route('/todos', 'routes/app/todos.tsx'),
      route('/todos/new', 'routes/app/new-todo.tsx'),
      route('/todos/view/:id', 'routes/app/view-todo.tsx'),
      route('/todo/edit/:id', 'routes/app/edit-todo.tsx'),
      route('/my-todos', 'routes/app/my-todos.tsx'),
      route('/users', 'routes/app/users.tsx'),
      route('/users/new', 'routes/app/new-user.tsx'),
      route('/users/view/:id', 'routes/app/view-user.tsx'),
      route('/users/edit/:id', 'routes/app/edit-user.tsx'),
      route('/profile', 'routes/app/profile.tsx'),
    ]),
  ]),

  /*********************** Catch all route ****************************/
  route('*', 'routes/not-found.tsx'),
] satisfies RouteConfig;
```

### 4.3 Route Configuration Notes
- `layout`: Used to share common layout across many routes
- `prefix`: Used to share common prefix segments in URLs between many routes
- `index`: Used to designate a route as the index of the app or routes under same prefix
- `route`: Used to define route with URL pattern and path to the routes file

## 5. Form Handling

### 5.1 Form Methods Comparison

| Method       | Navigation | UI Use Case                 | Style       |
| ------------ | ---------- | --------------------------- | ----------- |
| `<Form>`     | Yes        | Normal forms, routing       | Declarative |
| `useFetcher` | No         | Background tasks, no nav    | Mixed       |
| `useSubmit`  | Optional   | Custom triggers, imperative | Imperative  |

### 5.2 Form Implementation Examples

#### 5.2.1 Using `<Form>` (Declarative)
```jsx
import { Form } from "react-router-dom";

<Form method="post" action="/create">
  <input name="title" />
  <button type="submit">Submit</button>
</Form>
```

#### 5.2.2 Using `useFetcher()` (AJAX-style)
```jsx
import { useFetcher } from "react-router-dom";

const fetcher = useFetcher();

<fetcher.Form method="post" action="/like">
  <button type="submit">❤️ Like</button>
</fetcher.Form>

// Or programmatically:
fetcher.submit({ id: 1 }, { method: "post", action: "/like" });
```

#### 5.2.3 Using `useSubmit()` (Imperative)
```jsx
import { useSubmit } from "react-router-dom";

const submit = useSubmit();

<button onClick={() => submit({ name: "Justin" }, { method: "post", action: "/save" })}>
  Save
</button>
```

### 5.3 useFetcher Hook Details

#### 5.3.1 Key Features
- Independent State Management (idle, loading, submitting)
- Form Submission Without Navigation
- Programmatic Submission
- Data Loading
- Accessing Returned Data
- Optimistic UI Updates
- Error Handling

#### 5.3.2 Example Implementation
```tsx
// route('/projects/:projectId', './project.tsx')
import type { Route } from "./+types/project";
import { Form } from "react-router";
import { fakeDb } from "../db";

export async function action({
  request,
}: Route.ActionArgs) {
  let formData = await request.formData();
  let title = formData.get("title");
  let project = await fakeDb.updateProject({ title });
  return project;
}

export default function Project({
  actionData,
}: Route.ComponentProps) {
  return (
    <div>
      <h1>Project</h1>
      <Form method="post">
        <input type="text" name="title" />
        <button type="submit">Submit</button>
      </Form>
      {actionData ? (
        <p>{actionData.title} updated</p>
      ) : null}
    </div>
  );
}
```

## About Links in the pages
For all external (usually with full url: protocol and scheme), please also put an external link icon.
Ex:

```tsx
<Link to="https://numersoft.com/solutions" target="_blank" className="gap-2">
En savoir plus <ExternalLink className="h-4 w-4" />
</Link>
```

## Mongoose Model/Entity/Schema
The default file structure of model entity we used in /app/core/entities/*.entity.server.ts follow the below shape:

```ts
/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable @typescript-eslint/ban-types */

import mongoose, { Schema } from "mongoose";
import bcrypt from "bcryptjs";
import * as validator from "validator";
import { type IBaseModel, type TypedModel } from "~/core/abstracts/model.server";
import toJSON from "~/core/db/plugins/toJSON.plugin.server";
import paginate from "~/core/db/plugins/paginate.plugin.server";

export interface IUser extends IBaseModel {
  someFields?: string;

 // ...

  someOtherFields: Date;

  // ...
  
}

export type IUserMethods = {
  
  /**
   * Soft delete the user
   */
  softDelete(): Promise<IUser>;
  
  /**
   * Restore a soft-deleted user
   */
  restore(): Promise<IUser>;
  
  /**
   * Activate the user account
   */
  activate(): Promise<IUser>;
  
  /**
   * Deactivate the user account
   */
  deactivate(): Promise<IUser>;

  /**
   * Get the document id as a string independent of where it's stored (id or _id)
   */
  getId(): string;
  
};

export type UserModel = TypedModel<IUser, IUserMethods>;

const userSchema = new Schema<IUser, UserModel, IUserMethods>(
  {
    someFields: {
      type: String,
      required: false,
      trim: true,
    },

    // ... other needed fields



    someOtherFields: {
      type: Date,
      required: false,
    },

  },
  {
    timestamps: true,
  }
);


/** Method softDelete */
userSchema.method(
  "softDelete",
  async function softDelete() {
    this.someOtherFields = new Date(); // Just for the sample purpose
    return this.save();
  }
);

/** Method restore */
userSchema.method(
  "restore",
  async function restore() {
    this.someOtherFields = new Date(); // Just for the sample purpose
    return this.save();
  }
);


/** Method getId */
userSchema.method(
  "getId",
  function getId() {
    return this.id || this._id.toString();
  }
);


// Add plugins
userSchema.plugin(toJSON);
userSchema.plugin(paginate);

// Add indexes
userSchema.index({ someFields: 1 }, { unique: true });
userSchema.index({ someOtherFields: 1 }, { unique: false });

const User =
  mongoose.models.User || mongoose.model<IUser, UserModel>("User", userSchema);

export default User;
```


To each mongoose entity is generally attached a service which is located in /app/services/*.service.server.ts which extends
a base service class , itself located in /app/abstracts/service.server.ts. Here a sample service related to previous sample entity:


```ts
import User, {
  type IUser,
  type IUserMethods,
  type UserModel,
} from "~/core/entities/user.entity.server";
import { BaseService } from "~/core/abstracts/service.server";

// The base service class expose to children methods like: readOne, readMany, readManyPaginated, createOne, createMany, updateOne, updateOneAfterFindIt, updateMany, deleteOne, deleteMany, softDelete, restore, aggregate, bulkWrite, getRandomElement, getRandomElements, getRandomInt, getRandomFloat, getRandomDate, exists, getLastNRecordIDs, getLastNRecords
// Please see the base service file to read effective available method as it content can be updated sometimes
export default class UserService extends BaseService<
  IUser,
  IUserMethods,
  UserModel
> {
  constructor() {
    super(User);
  }

  private static instance: UserService;

  public static getInstance(): UserService {
    if (!UserService.instance) {
      UserService.instance = new UserService();
    }
    return UserService.instance;
  }
 

  /**
   * Find user by ID
   */
  async findById(id: string): Promise<IUser | undefined> {
    const user = await this.model.findById(id);
    return user || undefined;
  }


}

export const userService = UserService.getInstance();
```

NB: Of course if a service is need but not linked to a given mongoose entity, it's possible to not extends the base services class
in such case. Generaly these type of services will use other services
